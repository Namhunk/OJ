import sys

# 문제의 조건을 지키게 하기 위한 최소 이동 횟수
# 이동 한 번은 박스에서 1장 이상의 카드를 빼 다른 박스에 넣는 것을 의미, 빼낸 카드의 색상은 같지 않아도 된다.

# 박스는 N개, 카드는 색상으로 구분 가능, 서로 다른 색상의 수는 M개
# 조건
# 1. 박스 최대 1개는 조커를 박스로 지정할 수 있다. 조커 박스는 색이 다른 카드를 보관해도 된다.
# 2. 조커 박스를 제외한 모든 박스는 비어있거나, 같은 색의 카드만 보관해야 한다.
# 3. 같은 색을 가진 모든 카드는 모두 같은 박스에 있어야 한다. 이때 조커 박스에 들어 있는 카드는 제외한다.
#    같은 색을 가진 모든 카드가 조커 박스에 들어있는 것도 가능하다

# 박스 하나에 들어있는 같은 색상의 카드 수는 최대 9장

# 박스의 개수 N, 카드 색상의 개수 M (1 <= N, M <= 50)
N, M = map(int, input().strip().split())

# 한 박스에 들어있는 카드의 정보 (카드 정보는 M개 첫 정수부터 차례대로 i번 색상 카드의 수를 의미)
arr = [list(map(int, input().strip().split())) for _ in range(N)]
box = [-1 for _ in range(N)]
color = set()

for i in range(N): # 전체 박스 확인
    # 현재 색상이 한가지만 존재하는 경우
    if arr[i].count(0) == M-1:
        for j in range(M): # 해당 색상을 찾음
            if arr[i][j] != 0:
                if j in color: break
                box[i] = j
                color.add(j)
                break

cnt = -1 # 색상을 정하지 못한 첫 박스를 조커박스로 지정
for i in range(N):
    if box[i] < 0 and sum(arr[i]) > 0: # 아직 색상을 정하지 못했고 박스가 비어있지 않은 경우
        cnt += 1

ans = max(cnt, 0) # 조커박스를 지정하지 않아도 되는 경우
print(ans)
"""
1.  전체 박스를 돌며 각 박스별 1가지의 색상만 존재하는 박스를 찾고 해당 색상을 모으는 박스로 지정
2.  색상이 지정되지 않은 박스들은 각 1 ~ M의 색상을 모으는 박스로 지정, 조커박스도 지정
"""